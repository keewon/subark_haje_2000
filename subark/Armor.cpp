////////////////////////////////////////////////////////////////////////////////
//
// "Armor.cpp"
//		장갑과 장갑매니저
//												작성자 : oedalpha
//												Last Update : 2000..10. 
//
////////////////////////////////////////////////////////////////////////////////

/// Includes ///////////////////////////////////////////////////////////////////
#include "Armor.h"

/// Public macros & Constants //////////////////////////////////////////////////

/// Global variables ///////////////////////////////////////////////////////////

/// Local functinos ////////////////////////////////////////////////////////////

/// Implementations ////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//
// Armor::Armor();
//
// Part 의 하위클래스인 장갑 클래스의 생성자.
//
//												작성자 : oedalpha
//												Last Update : 2000. 10.
////////////////////////////////////////////////////////////////////////////////
Armor::Armor() {
	dMaxHP = 660.;
	dHP = dMaxHP;
	nType = PI_STEEL;
}

ArmorLiquidMetal::ArmorLiquidMetal() {
	dMaxHP = 120.;
	dHP = dMaxHP;
	nType = PI_LIQUID_METAL;
}

ArmorDuralumin::ArmorDuralumin() {
	dMaxHP = 210.;
	dHP = dMaxHP;
	nType = PI_DURALUMIN;
}

ArmorCarbon::ArmorCarbon() {
	dMaxHP = 450.;
	dHP = dMaxHP;
	nType = PI_CARBON_COATING;
}

ArmorAluminum::ArmorAluminum() {
	dMaxHP = 110.;
	dHP = dMaxHP;
	nType = PI_ALUMINUM;
}

ArmorSteel::ArmorSteel() {
	dMaxHP = 660.;
	dHP = dMaxHP;
	nType = PI_STEEL;
}

////////////////////////////////////////////////////////////////////////////////
//
// Armor::~Armor();
//
// Part 의 하위클래스인 장갑 클래스의 소멸자.
//												작성자 : oedalpha
//												Last Update : 2000..10.
////////////////////////////////////////////////////////////////////////////////
Armor::~Armor() {
}

////////////////////////////////////////////////////////////////////////////////
//
// Value* Armor::Operation(char *lpszOpName, VoidList *lpvlArgument);
//
// Operation 을 실행하는 함수. 아무것도 없다
//												작성자 : oedalpha
//												Last Update : 2000..10.
////////////////////////////////////////////////////////////////////////////////
Value* 
Armor::Operation(char *lpszOpName, VoidList *lpvlArgument) {
	return NULL;
}

////////////////////////////////////////////////////////////////////////////////
//
// Value* Armor:Attribute(char *lpszName);
//
// Attribute 를 읽어오는 함수
//												작성자 : oedalpha
//												Last Update : 2000..10.
////////////////////////////////////////////////////////////////////////////////
Value* 
Armor::Attribute(char *lpszName) {
	if (!strcmp(lpszName, "hp")) {
		IntValue *lpivReturn = new IntValue();
		lpivReturn->n = (int)dHP;
		return lpivReturn;
	}
	else return NULL;
}

////////////////////////////////////////////////////////////////////////////////
//
// double Armor::GetMaxHp();
//
// MaxdHP 를 돌려줌.
//												작성자 : oedalpha
//												Last Update : 2000..10.
////////////////////////////////////////////////////////////////////////////////
double
Armor::GetMaxHp() {
	return dMaxHP;
}
////////////////////////////////////////////////////////////////////////////////
//
// int Armor::GetHp();
//
// 현재 dHP 를 돌려줌.
//												작성자 : oedalpha
//												Last Update : 2000..10.
////////////////////////////////////////////////////////////////////////////////
double
Armor::GetHp() {
	return dHP;
}

////////////////////////////////////////////////////////////////////////////////
//
// 리턴값 현재 dHP
//												작성자 : oedalpha
//												Last Update : 2000..10.
////////////////////////////////////////////////////////////////////////////////
double 
Armor::Repair(double dHpPlus) {
	dHP += dHpPlus;
	if (dHP >= dMaxHP) dHP = dMaxHP;
	if (dHP <= 0) dHP = 0;
	return dHP;
}

////////////////////////////////////////////////////////////////////////////////
//
// 이 함수는 Armor 를 상속받은 클래스에 따라 다르다.
//
// 기본은 다음과 같다
//												작성자 : oedalpha
//												Last Update : 2000..10.
////////////////////////////////////////////////////////////////////////////////
double
Armor::
Damage(int bulletType, double dDamage) {
	dHP -= dDamage;
	return dHP;
}

////////////////////////////////////////////////////////////////////////////////
//
// 액체금속아머
//												작성자 : oedalpha
//												Last Update : 2000..10.
////////////////////////////////////////////////////////////////////////////////
double
ArmorLiquidMetal::
Damage(int bulletType, double dDamage) {
	dHP -= dDamage;
	return dHP;
}

////////////////////////////////////////////////////////////////////////////////
//
// 듀랄루민 아머
//												작성자 : oedalpha
//												Last Update : 2000..10.
////////////////////////////////////////////////////////////////////////////////
double
ArmorDuralumin::
Damage(int bulletType, double dDamage) {
	dHP -= dDamage;
	return dHP;
}

////////////////////////////////////////////////////////////////////////////////
//
// 카본아머
//												작성자 : oedalpha
//												Last Update : 2000..10.
////////////////////////////////////////////////////////////////////////////////
double
ArmorCarbon::
Damage(int bulletType, double dDamage) {
	dHP -= dDamage;
	return dHP;
}

////////////////////////////////////////////////////////////////////////////////
//
// 알루미늄아머
//												작성자 : oedalpha
//												Last Update : 2000..10.
////////////////////////////////////////////////////////////////////////////////
double
ArmorAluminum::
Damage(int bulletType, double dDamage) {
	dHP -= dDamage;
	return dHP;
}

////////////////////////////////////////////////////////////////////////////////
//
// 스틸 아머
//												작성자 : oedalpha
//												Last Update : 2000..10.
////////////////////////////////////////////////////////////////////////////////
double
ArmorSteel::
Damage(int bulletType, double dDamage) {
	dHP -= dDamage;
	return dHP;
}
