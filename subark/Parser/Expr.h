////////////////////////////////////////////////////////////////////////////////
//
// "Expr.h"
//		Expression 클래스
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

#ifndef _EXPR_H_ASURA_BECD_
#define _EXPR_H_ASURA_BECD_

/// Includes ///////////////////////////////////////////////////////////////////

#include "Types.h"
#include "Value.h"

// Public macros & Constants //////////////////////////////////////////////////

/// Class or functions /////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//
// enum ExprCode
//		Expression의 종류를 나타내는 코드
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

typedef enum { 
	EC_BOOL, EC_INT, EC_REAL, 						// Constant
	EC_NOT, EC_AND, EC_OR, 							// Boolean
	EC_ADD, EC_SUB, EC_MUL, EC_DIV, EC_MOD,			// Numeric
	EC_EQ, EC_NE, EC_GT, EC_GE, EC_LT, EC_LE,		// Compare
	EC_VAR, 										// Variable read
	EC_FUNC											// Function or operation
} ExprCode;

////////////////////////////////////////////////////////////////////////////////
//
// class Expression
//		Expression의 슈퍼클래스
//												작성자 : asura
//												Last Update : 2000. 7. 27.
// <참고> Expression *형 변수의 prefix는 expr을 쓴다
//
////////////////////////////////////////////////////////////////////////////////

class Expression {
	public:
		~Expression();
		
		ExprCode ecCode;		// Expression의 종류
		int nPosition;			// Debug를 위한 정보
};

////////////////////////////////////////////////////////////////////////////////
//
// class ConstantExpr
//		상수 Expression : <int> | <real> | <bool>
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

class ConstantExpr : public Expression {
	public:
		ConstantExpr(int n);
		ConstantExpr(double d);
		ConstantExpr(bool b);

		Value *lpvConst;
};

////////////////////////////////////////////////////////////////////////////////
//
// class NotExpr
//		not <Expr>
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

class NotExpr : public Expression {
	public:
		NotExpr();

		Expression *exprBool;
};

////////////////////////////////////////////////////////////////////////////////
//
// class BopExpr
//		Binary Operation
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

class BopExpr : public Expression {
	public:
		BopExpr(ExprCode ecOp);

		Expression *exprLeft, *exprRight;
};

////////////////////////////////////////////////////////////////////////////////
//
// class VarExpr
//		변수나 Part의 Attribute를 읽는 Expression
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

class VarExpr : public Expression {
	public:
		VarExpr();

		char *lpszScope;
		char *lpszId;
		VoidList *lpvlExprIndexes;		// 배열의 인덱스 리스트
};

////////////////////////////////////////////////////////////////////////////////
//
// class BopExpr
//		Binary Operation
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

class FuncExpr : public Expression {
	public:
		FuncExpr();

		char *lpszScope;
		char *lpszId;
		VoidList *lpvlExprParam;		// 파라미터 리스트
};

#endif // _EXPR_H_ASURA_BECD_