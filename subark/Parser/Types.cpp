////////////////////////////////////////////////////////////////////////////////
//
// "Types.cpp"
//		Jacqueline Parser에서 사용될 보조 클래스 정의
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

/// Includes ///////////////////////////////////////////////////////////////////

#include <malloc.h>
#include <string.h>
#include "Types.h"

/// Public macros & Constants //////////////////////////////////////////////////

#ifndef NULL
#define NULL (0)
#endif

/// Global variables ///////////////////////////////////////////////////////////

/// Local functinos ////////////////////////////////////////////////////////////

/// Implementations ////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//
// VoidElement::VoidElement()
//		VoidElement(리스트 원소)의 생성자
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

VoidElement::VoidElement()
{
	lpveNext = NULL;
	lpElement = NULL;
}

////////////////////////////////////////////////////////////////////////////////
//
// VoidList::VoidList()
//		리스트 클래스의 생성자
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

VoidList::VoidList()
{
	lpveHead = lpveTail = NULL;
}

////////////////////////////////////////////////////////////////////////////////
//
// VoidList::~VoidList()
//		리스트 클래스의 소멸자
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

VoidList::~VoidList()
{
	VoidElement *lpve;

	for (lpve = lpveHead; lpve; lpve = lpveHead) {
		lpveHead = lpveHead->lpveNext;
		delete lpve;
	}
}

////////////////////////////////////////////////////////////////////////////////
//
// void VoidList::Add(void *lpNewElement)
//		리스트에 새로운 원소를 tail 뒤쪽에 추가
//		IN:
//			lpNewElement - 새로 추가할 원소의 주소
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

void
VoidList::Add(void *lpNewElement)
{
	if (!lpveHead) {
		lpveHead = lpveTail = new VoidElement();
		lpveHead->lpElement = lpNewElement;
	} else {
		lpveTail->lpveNext = new VoidElement();
		lpveTail = lpveTail->lpveNext;
		lpveTail->lpElement = lpNewElement;
	}
}

////////////////////////////////////////////////////////////////////////////////
//
// ScopeElement::ScopeElement()
//		ScopeElement(스코프 원소)의 생성자
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

ScopeElement::ScopeElement()
{
	lpszId = NULL;
	lpElement = NULL;
	lpseNext = NULL;
}

////////////////////////////////////////////////////////////////////////////////
//
// ScopeElement::~ScopeElement()
//		ScopeElement(스코프 원소)의 소멸자
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

ScopeElement::~ScopeElement()
{
	if (lpszId) free(lpszId);
}

////////////////////////////////////////////////////////////////////////////////
//
// Scope::Scope()
//		스코프의 생성자
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

Scope::Scope()
{
	lpseHead = lpseTail = NULL;
}

////////////////////////////////////////////////////////////////////////////////
//
// Scope::~Scope()
//		스코프의 소멸자
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

Scope::~Scope()
{
	ScopeElement *lpseTemp;

	while (lpseHead) {
		lpseTemp = lpseHead;
		lpseHead = lpseHead->lpseNext;
		delete lpseTemp;				
	}										// 스코프 원소를 하나씩 소멸시킨다
}

////////////////////////////////////////////////////////////////////////////////
//
// void Scope::Add(ScopeElement *lpseNew)
//		새로운 매칭을 스코프의 head 앞에 추가
//		IN:
//			lpseNew - 스코프 원소의 주소. 나중에 스코프가 소멸할 때 같이 
//					소멸된다.
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

void
Scope::Add(ScopeElement *lpseNew)
{
	lpseNew->lpseNext = lpseHead;
	lpseHead = lpseNew;
}

////////////////////////////////////////////////////////////////////////////////
//
// void *Scope::Search(char *lpszId)
//		이름을 스코프에서 검색한다.
//		IN:
//			lpsz - 스코프에서 검색할 이름
//		RETURN:
//			이름에 해당하는 lpElement. 존재하지 않으면 NULL
//												작성자 : asura
//												Last Update : 2000. 7. 27.
//
////////////////////////////////////////////////////////////////////////////////

void *
Scope::Search(char *lpszId)
{
	ScopeElement *lpse;

	for (lpse = lpseHead; lpse; lpse = lpse->lpseNext)
		if (!strcmp(lpse->lpszId, lpszId)) return lpse->lpElement;

	return NULL;
}