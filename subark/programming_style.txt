Programming Style
2000.7.17. by BusErrorCoreDumped Team.

@ 탭수 : 4
@ 주석은 한글로 쓴다.
@ 파일 이름 정하기
첫글자는 대문자, 공백없이 중간중간 대문자, 밑줄 사용안함.
소스는 *.cpp, 헤더는 *.h

@ 어떤 문장이 80칸을 넘어가면 엔터치고 다음 줄에 쓴다.
  이 때 그 문장이 시작한 지점보다 한 탭 더 들어간 곳 부터 쓴다.

ex)
void
HAJE::abcdabcdadlfkjalsdkfjalskdjflkasdjflasjdlfjadslfjlasd(int adsf, 
	char alsdkfj, Value v) {
}

@ 클래스 이름 정하기
클래스이름은 파일이름을 정하는 형식과 같이 정한다.

@ 변수 이름 정하기
맨 앞에 소문자로 타입정하기, 그 다음에 대문자로 시작하여
파일이름을 정하는 형식과 동일하게 한다.

  타입   맨 앞의 소문자
  int	 n
  char*  lpsz
  char   c
  char[] sz
  bool   b
  double d

포인터에는 lp 를 붙인다. float 형식은 double 로 대체한다.
loop 에서는 지역변수로 i, j, k 를 사용할 수 있다.
나머지는 적당히. 
애매모호한 경우 클래스 정의 할 때 표기한다.

@ 함수이름 정하기
첫자는 대문자, 클래스 이름과 동일한 방식
멤버펑션도 마찬가지 이다.

@ 함수 쓰기

/////////////////////////////////////////
//
// 리턴타입 클래스::함수이름(인자들, 인자들) 
//		함수에 대한 설명
// 		IN: 
//			인자에 대한 설명
// 		OUT: 
//			포인터로 받아가는 값에 대한 설명
// 		RETURN: 
//			리턴값에 대한 설명
// 		SIDE EFFECT: 
//			전역변수나 기타 다른 값에 미치는 영향
//											작성자 : 누구누구
//											Last Update : 언제
//
////////////////////////////////////////
리턴타입
클래스::함수이름(인자들,인자들) {

	내용;
	내용;
}

@ 특수한 타입은 웬만하면 다 class 로 만든다.
  struct 문을 쓰는 경우 class 처럼 이름을 정한다.

@ 함수 정의 하기

@ 헤더파일 이나 소스파일의 시작은 다음과 같이 한다.

///////////////////////////////////////(80개를 쓴다)
//  "filename"
//  description
// 										작성한 사람
//  									Last update : 몇월 몇일
///////////////////////////////////////(80개를 쓴다)

@ 헤더파일의 시작
#ifndef _클래스이름_자기아이디_팀이름_
#define _클래스이름_자기아이디_팀이름_

@ include 문을 쓰기 전에, 매크로와 상수를 정의하기 전에 제목을 붙인다
  소스파일도 마찬가지 이다.
/// Includes ////////////////////////////(80칸을 채운다)
/// Public Macros & Variables /////////////////////////////////////////////////

@ 헤더파일에는 다음과 같은 항목이 있다.
/// Classes & Functions //////////////////////////////

@ 소스파일에는 다음과 같은 항목이 있다.
/// Global Variables /////////////////////////////////
/// Local Functions ///////////////////////
/// Implementations ///////////////////////////////

@ 헤더파일의 끝
#endif		// _클래스이름_자기아이디_팀이름_


